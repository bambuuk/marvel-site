{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/skeleton/Skeleton.js","utils/setContent.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","process","setProcess","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","char","descriptionChar","description","length","slice","name","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComicses","_transformComics","getComics","title","series","price","prices","pageCount","language","textObjects","Skeleton","className","setContent","Component","Spinner","View","imgStyle","href","RandomChar","props","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","onClick","mjolnir","CharList","chars","setChars","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newChars","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","elements","useMemo","arr","console","log","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","CharInfo","charId","ErrorBoundary","state","error","errorInfo","this","setState","children","MainPage","selectedChar","Helmet","content","decoration"],"mappings":"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","file":"static/js/5.7b893c77.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\n// Создаём обычный джаваскриптовый класс, поэтому не наследуем и не импортируем компоненты\r\nconst useMarvelService = () => {\r\n    const { request, clearError, process, setProcess} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=0f63933eef0210b8256f2966cbc48725';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    // метод получения данных всех персонажей\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    // метод получения данных одного персонажа\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]); // в _transformCharacter передаём конкретный объект (персонаж)\r\n    }\r\n\r\n    // метод формирования объекта с нужными нам данными персонажа, вытягиваем с ответа по гет запросу что нам нужно\r\n    const _transformCharacter = (char) => {\r\n        let descriptionChar = '';\r\n        if (char.description) {\r\n            if (char.description.length > 190) {\r\n                descriptionChar = `${char.description.slice(0, 190)} ...`;\r\n            } else {\r\n                descriptionChar = char.description;\r\n            }\r\n        } else {\r\n            descriptionChar = 'There is no description for this character';\r\n        } \r\n        return {\r\n            name: char.name,\r\n            id: char.id,\r\n            description: descriptionChar,\r\n            // thumbnail - маленькая картинка, превьюха\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    // запрос комиксов\r\n    const getAllComicses = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics); \r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            url: comics.urls[0].url,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            name: comics.series.name,\r\n            price: comics.prices[0].price,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {\r\n        process,\r\n        setProcess, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        getAllComicses, \r\n        getComics\r\n    }\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n\r\n    const [process, setProcess] = useState('waiting');\r\n\r\n    // метод запроса на сервер\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setProcess('loading');\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            return data;\r\n        } catch(e) {\r\n            setProcess('error');\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => {\r\n        setProcess('loading');\r\n    }, []);\r\n\r\n    return {request, clearError, process, setProcess}\r\n}","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from '../components/spinner/Spinner';\r\nimport ErrorMessage from '../components/errorMessage/ErrorMessage';\r\nimport Skeleton from '../components/skeleton/Skeleton';\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case 'waiting':\r\n      return <Skeleton />;\r\n    case 'loading':\r\n      return <Spinner />;\r\n    case 'confirmed':\r\n      return <Component data={data} />;\r\n    case 'error':\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error('Unexpected process state');\r\n  }\r\n}\r\n\r\nexport default setContent;","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport setContent from '../../utils/setContent';\n\nconst RandomChar = (props) => {\n\n    const [char, setChar] = useState({});\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    // обновляет текущий state с данными о персонаже\n    const updateChar = () => {\n        //вызываем очистку ошибки каждый раз, когда загружаем нового персонажа\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    return (\n        <div className=\"randomchar\">\n            {setContent(process, View, char)}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ data }) => {\n    const { name, description, thumbnail, homepage, wiki } = data;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { getAllCharacters, process, setProcess } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newChars) => {\n        let ended = false;\n        if (newChars.length < 9) {\n            ended = true;\n        }\n\n        setChars(chars => [...chars, ...newChars]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        console.log('goooo')\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const elements = useMemo(() => {\n        return setContent(process, () => renderItems(chars), newItemLoading);\n        // eslint-disable-next-line\n    }, [process]);\n\n    return (\n        <div className=\"char__list\">\n            {elements}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport setContent from '../../utils/setContent';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {getCharacter, clearError, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        // eslint-disable-next-line\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        //вызываем очистку ошибки каждый раз, когда загружаем нового персонажа\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    return (\n        <div className=\"char__info\">\n            {setContent(process, View, char)}\n        </div>\n    )\n}\n\n    const View = ({ data }) => {\n        const { name, description, thumbnail, homepage, wiki, comics } = data;\n\n        let imgStyle = { 'objectFit': 'cover' };\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = { 'objectFit': 'contain' };\n        }\n        return (\n            <>\n                <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle} />\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">Homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">WiKi</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            // eslint-disable-next-line\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            </>\n        )\n    }\n\n    CharInfo.propTypes = {\n        charId: PropTypes.number\n    }\n\n    export default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n// компонента предохранитель\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport { Helmet } from \"react-helmet\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}