{"version":3,"sources":["components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js"],"names":["ErrorMessage","style","display","width","height","objectFit","margin","src","img","alt","useMarvelService","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","clearError","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","offset","res","results","map","_transformCharacter","getCharacter","id","char","descriptionChar","description","length","slice","name","thumbnail","path","extension","homepage","urls","wiki","comics","items","getAllComicses","_transformComics","getComics","title","series","price","prices","pageCount","language","textObjects","View","imgStyle","className","href","RandomChar","props","setChar","useEffect","updateChar","onCharLoaded","Math","floor","random","then","errorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","chars","setChars","newItemLoading","setNewItemLoading","setOffset","charEnded","setCharEnded","onRequest","initial","onCharListLoaded","newChars","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","arr","i","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","CharInfo","console","log","charId","skeleton","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","decoration"],"mappings":"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","file":"static/js/4.520ea894.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain', margin: '0 auto'}} src={img} alt='error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\r\n\r\n// Создаём обычный джаваскриптовый класс, поэтому не наследуем и не импортируем компоненты\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=0f63933eef0210b8256f2966cbc48725';\r\n    const _baseOffset = 210;\r\n\r\n\r\n\r\n    // метод получения данных всех персонажей\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n    \r\n    // метод получения данных одного персонажа\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]); // в _transformCharacter передаём конкретный объект (персонаж)\r\n    }\r\n\r\n    // метод формирования объекта с нужными нам данными персонажа, вытягиваем с ответа по гет запросу что нам нужно\r\n    const _transformCharacter = (char) => {\r\n        let descriptionChar = '';\r\n        if (char.description) {\r\n            if (char.description.length > 190) {\r\n                descriptionChar = `${char.description.slice(0, 190)} ...`;\r\n            } else {\r\n                descriptionChar = char.description;\r\n            }\r\n        } else {\r\n            descriptionChar = 'There is no description for this character';\r\n        } \r\n        return {\r\n            name: char.name,\r\n            id: char.id,\r\n            description: descriptionChar,\r\n            // thumbnail - маленькая картинка, превьюха\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    // запрос комиксов\r\n    const getAllComicses = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics); \r\n    }\r\n\r\n    const getComics = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            url: comics.urls[0].url,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            name: comics.series.name,\r\n            price: comics.prices[0].price,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacter, getAllComicses, clearError, getComics}\r\n}\r\n\r\nexport default useMarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    // метод запроса на сервер\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\n\nimport './randomChar.scss';\nimport useMarvelService from '../../services/MarvelService';\nimport mjolnir from '../../resources/img/mjolnir.png';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst RandomChar = (props) => {\n\n    const [char, setChar] = useState({});\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    // обновляет текущий state с данными о персонаже\n    const updateChar = () => {\n        //вызываем очистку ошибки каждый раз, когда загружаем нового персонажа\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n            getCharacter(id)\n            .then(onCharLoaded)\n    }\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br />\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\">\n                    <div className=\"inner\" onClick={updateChar}>try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n            </div>\n        </div>\n    )\n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    return (\n        <div className=\"randomchar__block\">\n            <img\n                src={thumbnail}\n                alt=\"Random character\"\n                className=\"randomchar__img\"\n                style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport './charList.scss';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nconst CharList = (props) => {\n\n    const [chars, setChars] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newChars) => {\n        let ended = false;\n        if (newChars.length < 9) {\n            ended = true;\n        }\n\n        setChars(chars => [...chars, ...newChars]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9)\n        setCharEnded(charEnded => ended)\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <li\n                    className=\"char__item\"\n                    tabIndex={0}\n                    ref={el => itemRefs.current[i] = el}\n                    key={item.id}\n                    onClick={() => {\n                        props.onCharSelected(item.id);\n                        focusOnItem(i);\n                    }}\n                    onKeyPress={(e) => {\n                        if (e.key === ' ' || e.key === \"Enter\") {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }\n                    }}>\n                    <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                    <div className=\"char__name\">{item.name}</div>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"char__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    const items = renderItems(chars);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    // спинер показываем когда стоит загрузка и незагрузка новых персонажей\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        console.log('edit')\n        updateChar();\n    }, [props.charId])\n\n    const updateChar = () => {\n        const { charId } = props;\n        if (!charId) {\n            return;\n        }\n        //вызываем очистку ошибки каждый раз, когда загружаем нового персонажа\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n        // если нет инфы по персонажу, или спинера загрузки, или ошибки, то отображаем комп Skeleton\n    const skeleton = char || loading || error ? null : <Skeleton />\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    // если нет спинера загрузки или нет ошибки\n    const content = !(loading || error || !char) ? <View char={char} /> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n    const View = ({ char }) => {\n        const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n        let imgStyle = { 'objectFit': 'cover' };\n        if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n            imgStyle = { 'objectFit': 'contain' };\n        }\n        return (\n            <>\n                <div className=\"char__basics\">\n                    <img src={thumbnail} alt={name} style={imgStyle} />\n                    <div>\n                        <div className=\"char__info-name\">{name}</div>\n                        <div className=\"char__btns\">\n                            <a href={homepage} className=\"button button__main\">\n                                <div className=\"inner\">Homepage</div>\n                            </a>\n                            <a href={wiki} className=\"button button__secondary\">\n                                <div className=\"inner\">WiKi</div>\n                            </a>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"char__descr\">\n                    {description}\n                </div>\n                <div className=\"char__comics\">Comics:</div>\n                <ul className=\"char__comics-list\">\n                    {comics.length > 0 ? null : 'There is no comics with this character'}\n                    {\n                        comics.map((item, i) => {\n                            if (i > 9) return;\n                            return (\n                                <li key={i} className=\"char__comics-item\">\n                                    {item.name}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n            </>\n        )\n    }\n\n    CharInfo.propTypes = {\n        charId: PropTypes.number\n    }\n\n    export default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\n// компонента предохранитель\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo) {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);\r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ErrorBoundary>\r\n                <RandomChar />\r\n            </ErrorBoundary>\r\n\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n\r\n                <ErrorBoundary>\r\n                    <CharInfo charId={selectedChar} />\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;"],"sourceRoot":""}