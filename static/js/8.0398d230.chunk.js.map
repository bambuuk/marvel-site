{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/comicsList/ComicsList.js","components/pages/ComicsPage.js"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","setContent","process","Component","newItemLoading","Spinner","ErrorMessage","Error","ComicsList","useState","comicses","setComicses","setNewItemLoading","offset","setOffset","comicsEnded","setComicsEnded","useMarvelService","getAllComicses","setProcess","useEffect","onRequest","initial","then","onCharListLoaded","newComicses","ended","length","className","items","map","item","i","thumbnail","name","price","id","tabIndex","to","src","alt","renderItem","disabled","style","onClick","ComicsPage","Helmet","content","AppBanner"],"mappings":"yJAIe,SAASA,EAAmBC,GACzC,OCJa,SAA4BA,GACzC,GAAIC,MAAMC,QAAQF,GAAM,OAAO,OAAAG,EAAA,GAAiBH,GDGzC,CAAkBA,IELZ,SAA0BI,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgBJ,IAAQ,OAAAS,EAAA,GAA2BT,IGLvE,WACb,MAAM,IAAIU,UAAU,wIHIwE,K,mJIGxFC,EAAa,SAACC,EAASC,EAAWC,GACpC,OAAQF,GACJ,IAAK,UACD,OAAO,cAACG,EAAA,EAAD,IACX,IAAK,UACD,OAAOD,EAAiB,cAACD,EAAD,IAAgB,cAACE,EAAA,EAAD,IAC5C,IAAK,YACD,OAAO,cAACF,EAAD,IACX,IAAK,QACD,OAAO,cAACG,EAAA,EAAD,IACX,QACI,MAAM,IAAIC,MAAM,8BAwEbC,EApEI,WAEf,MAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4CF,oBAAS,GAArD,mBAAOL,EAAP,KAAuBQ,EAAvB,KACA,EAA4BH,mBAAS,KAArC,mBAAOI,EAAP,KAAeC,EAAf,KACA,EAAsCL,oBAAS,GAA/C,mBAAOM,EAAP,KAAoBC,EAApB,KAEA,EAA8CC,cAAvCC,EAAP,EAAOA,eAAgBhB,EAAvB,EAAuBA,QAASiB,EAAhC,EAAgCA,WAEhCC,qBAAU,WACNC,EAAUR,GAAQ,KAEnB,IAEH,IAAMQ,EAAY,SAACR,EAAQS,GACbV,GAAVU,GACAJ,EAAeL,GACVU,KAAKC,GACLD,MAAK,kBAAMJ,EAAW,iBAGzBK,EAAmB,SAACC,GACtB,IAAIC,GAAQ,EACRD,EAAYE,OAAS,IACrBD,GAAQ,GAGZf,GAAY,SAAAD,GAAQ,4BAAQA,GAAR,YAAqBe,OACzCb,GAAkB,SAAAR,GAAc,OAAI,KACpCU,GAAU,SAAAD,GAAM,OAAIA,EAAS,KAC7BG,GAAe,SAAAD,GAAW,OAAIW,MAwBlC,OACI,sBAAKE,UAAU,eAAf,UACK3B,EAAWC,GAAS,kBAvB7B,SAAoBZ,GAChB,IAAMuC,EAAQvC,EAAIwC,KAAI,SAACC,EAAMC,GACzB,IAAOC,EAA8BF,EAA9BE,UAAWC,EAAmBH,EAAnBG,KAAMC,EAAaJ,EAAbI,MAAOC,EAAML,EAANK,GAC/B,OACI,oBAAIR,UAAU,eAAuBS,SAAU,EAA/C,SACI,eAAC,IAAD,CAAMC,GAAE,kBAAaF,GAArB,UACI,qBAAKG,IAAKN,EAAWO,IAAKN,EAAMN,UAAU,qBAC1C,qBAAKA,UAAU,oBAAf,SAAoCM,IACpC,sBAAKN,UAAU,qBAAf,UAAqCO,EAArC,WAJ0BH,MAU1C,OACI,oBAAIJ,UAAU,eAAd,SACKC,IAOsBY,CAAW/B,KAAWN,GACjD,wBACIwB,UAAU,mCACVc,SAAUtC,EACVuC,MAAO,CAAE,QAAW5B,EAAc,OAAS,SAC3C6B,QAAS,kBAAMvB,EAAUR,IAJ7B,SAKQ,qBAAKe,UAAU,QAAf,6BCjELiB,UAhBI,WACf,OACI,qCACI,eAACC,EAAA,EAAD,WACI,sBACIZ,KAAK,cACLa,QAAQ,iCAEZ,mDAEJ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD","file":"static/js/8.0398d230.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {useState, useEffect} from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport './comicsList.scss';\n\nconst setContent = (process, Component, newItemLoading) => {\n    switch (process) {\n        case 'waiting':\n            return <Spinner />;\n        case 'loading':\n            return newItemLoading ? <Component /> : <Spinner />;\n        case 'confirmed':\n            return <Component />;\n        case 'error':\n            return <ErrorMessage />;\n        default:\n            throw new Error('Unexpected process state');\n    }\n}\n\nconst ComicsList = () => {\n\n    const [comicses, setComicses] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [comicsEnded, setComicsEnded] = useState(false);\n\n    const {getAllComicses, process, setProcess} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n        // eslint-disable-next-line\n    }, []);\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllComicses(offset)\n            .then(onCharListLoaded)\n            .then(() => setProcess('confirmed'))\n    }\n\n    const onCharListLoaded = (newComicses) => {\n        let ended = false;\n        if (newComicses.length < 8) {\n            ended = true;\n        }\n        \n        setComicses(comicses => [...comicses, ...newComicses]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 8)\n        setComicsEnded(comicsEnded => ended)\n    }\n\n    function renderItem(arr) {\n        const items = arr.map((item, i) => {\n            const {thumbnail, name, price, id} = item;\n            return (\n                <li className=\"comics__item\" key={i} tabIndex={0}>\n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt={name} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{name}</div>\n                        <div className=\"comics__item-price\">{price}$</div>\n                    </Link>\n                </li>\n            )\n        });\n\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n\n    return (\n        <div className=\"comics__list\">\n            {setContent(process, () => renderItem(comicses), newItemLoading)}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': comicsEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                    <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nexport default ComicsList;","import { Helmet } from \"react-helmet\";\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\nimport ComicsList from \"../comicsList/ComicsList\";\r\n\r\nconst ComicsPage = () => {\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner />\r\n            <ComicsList />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;"],"sourceRoot":""}